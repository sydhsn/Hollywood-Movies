{"version":3,"sources":["components/monster/monster.component.jsx","components/monster-list/monster-lis.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Monster","props","react_default","a","createElement","className","alt","movies","title","src","posterURL","email","MonsterList","map","key","monster_component_Monster","_id","SearchBox","_ref","placeholder","handleChange","type","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","setState","searchField","target","value","state","_this2","fetch","then","response","json","users","_this$state","filteredmovies","filter","movie","toLowerCase","includes","search_box_component_SearchBox","monster_lis_component","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9bdb68fd.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./monster.style.css\";\r\nexport const Monster = props => (\r\n        <div className=\"card-container\">\r\n           <img alt={props.movies.title} src={`https://image.tmdb.org/t/p/original`+props.movies.posterURL}/>\r\n           <h2>{props.movies.title}</h2> \r\n           <p>{props.movies.email}</p>\r\n       </div>\r\n);","import React from 'react';\r\nimport { Monster } from \"../monster/monster.component\";\r\nimport \"./monster-list.style.css\";\r\nconst MonsterList = props => {\r\n    return (<div className=\"card-list\">\r\n        {props.movies.map((movies, key) => (<Monster key={movies._id} movies={movies} />))}\r\n    </div>);\r\n};\r\n\r\nexport default MonsterList;","import React from \"react\";\r\nimport \"./search-box.style.css\";\r\n\r\nexport const SearchBox = ({placeholder , handleChange}) => (\r\n    <input \r\n    className=\"search\"\r\n    type=\"search\" \r\n    placeholder={placeholder} \r\n    onChange={handleChange}/>\r\n\r\n);","import React, {Component} from 'react';\nimport \"./App.css\";\nimport  MoviesList  from \"./components/monster-list/monster-lis.component\";\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {  movies:[], searchField:''};\n  }\n\n  componentDidMount() {\n    fetch(\"https://api.myjson.com/bins/a33mp\")\n    .then(response => response.json())\n    .then(users => {\n      this.setState({movies:users});\n    });\n  };\n\n  handleChange = e => {\n    this.setState({searchField:e.target.value});\n  }\n\n  render() {\n\n    const {movies, searchField } = this.state;\n    const filteredmovies = movies.filter(movie => {\n    return movie.title.toLowerCase().includes(searchField.toLowerCase())\n    })\n  \n  return (\n          <div className=\"App\">\n              <h1>Movies Hollywood</h1>\n              <SearchBox placeholder=\"Search Movie\"  handleChange={this.handleChange}\n              />\n              <MoviesList movies={filteredmovies}/>\n          </div>\n          );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}